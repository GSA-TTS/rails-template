# Note that environment variables can be set in several places
# See https://docs.gitlab.com/ee/ci/variables/#cicd-variable-precedence

workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_BRANCH == "production"

stages:
  - build
  - test
  - deploy

variables:
  SECRET_KEY_BASE: not-actually-secret
  POSTGRES_DB: <%= app_name %>_test
  POSTGRES_PASSWORD: not-actually-secret
  CACHE_FALLBACK_KEY: main
  PACKAGE_MANAGER_SET: bundler,npm
  SETTINGS__GITLAB_ACCESS_TOKEN: $DEPENDABOT_KEY
  RUBY_VERSION: <%= RUBY_VERSION %>

include:
  - local: ".gitlab/rails_helpers.yml"

default:
  image: "ruby:${RUBY_VERSION}"
  cache:
    - !reference [.cache-pull]

build-project:
  stage: build
  inherit:
    default:
      - image
      - tags
  extends: .init-project-build
  rules:
    - if: $CI_PIPELINE_SOURCE != "schedule"

brakeman-scan:
  stage: test
  extends: .setup-languages
  script:
    - bin/brakeman --no-pager --ensure-ignore-notes -f sarif -o output.sarif.json
  artifacts:
    when: always
    expose_as: "Brakeman results"
    paths:
      - output.sarif.json

dependency_scanning:
  stage: test
  extends: .setup-languages
  script:
    - bundle exec rake bundler:audit
    - bundle exec rake yarn:audit
    - gem install cyclonedx-ruby
    - cyclonedx-ruby -p . -o ruby_bom.xml
  artifacts:
    expose_as: "Ruby SBOM"
    paths:
      - ruby_bom.xml

rspec:
  stage: test
  extends: .setup-project
  script:
    - bundle exec rspec
  rules:
    - if: $CI_PIPELINE_SOURCE != "schedule"

pa11y_scan:
  stage: test
  extends: .run-server
  script:
    - !reference [.install-puppet-deps]
    - yarn run pa11y-ci -c pa11yci.js
  rules:
    - if: $CI_PIPELINE_SOURCE != "schedule"

.owasp_setup:
  stage: test
  extends: .run-server
  image: "rcahearngsa/owasp-ruby:${RUBY_VERSION}"
  variables:
    WORKER_MEMORY: 3G
    WORKER_DISK: 6G
  before_script:
    - !reference [.run-server, before_script]
    - ln -s $PWD /zap/wrk
  artifacts:
    expose_as: "OWASP Report"
    paths:
      - zap_report.html

owasp_scan:
  extends: .owasp_setup
  script:
    - /zap/zap-baseline.py -t http://localhost:3000 -c zap.conf -I -r zap_report.html
  rules:
    - if: $CI_PIPELINE_SOURCE != "schedule"

owasp_daily_scan:
  extends: .owasp_setup
  script:
    - /zap/zap-full-scan.py -t http://localhost:3000 -c zap.conf -I -r zap_report.html
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"

.terraform:setup:
  stage: test
  inherit:
    default: false
  image:
    name: "hashicorp/terraform"
    entrypoint: ["sh"]
  variables:
    CF_API_URL: https://api.fr.cloud.gov
    TERRAFORM_BACKEND_KEY: terraform.tfstate.staging
  before_script:
    - cd terraform
    - terraform init -backend-config=$TERRAFORM_PUBLIC_BACKEND_CONFIG -backend-config=$TERRAFORM_SECRET_BACKEND_CONFIG -backend-config="key=$TERRAFORM_BACKEND_KEY"
  rules:
    - if: $CI_PIPELINE_SOURCE != "schedule"

.terraform:variables:staging:
  stage: deploy
  variables:
    CF_USER: $CF_USERNAME

.terraform:variables:production:
  stage: deploy
  variables:
    CF_USER: $CF_USERNAME
    TERRAFORM_BACKEND_KEY: terraform.tfstate.production

terraform:fmt:
  extends: .terraform:setup
  script:
    - terraform fmt -check -recursive .

terraform:validate:
  extends: .terraform:setup
  script:
    - terraform validate

terraform:plan:staging:
  extends:
    - .terraform:setup
    - .terraform:variables:staging
  dependencies: []
  script:
    - https_proxy=$http_proxy apk add zip
    - terraform plan -out=staging_plan.out -var-file=staging.tfvars -var rails_master_key=$RAILS_MASTER_KEY -var cf_user=$CF_USERNAME
  artifacts:
    paths:
      - terraform/staging_plan.out

terraform:apply:staging:
  extends:
    - .terraform:setup
    - .terraform:variables:staging
  needs: ["terraform:plan:staging"]
  script:
    - https_proxy=$http_proxy apk add zip
    - terraform apply -var-file=staging.tfvars -var rails_master_key=$RAILS_MASTER_KEY -var cf_user=$CF_USERNAME staging_plan.out
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

terraform:plan:production:
  extends:
    - .terraform:setup
    - .terraform:variables:production
  dependencies: []
  script:
    - https_proxy=$http_proxy apk add zip
    - terraform plan -out=production_plan.out -var-file=production.tfvars -var rails_master_key=$PRODUCTION_RAILS_MASTER_KEY -var cf_user=$CF_USERNAME
  artifacts:
    paths:
      - terraform/production_plan.out

terraform:apply:production:
  extends:
    - .terraform:setup
    - .terraform:variables:production
  needs: ["terraform:plan:production"]
  script:
    - https_proxy=$http_proxy apk add zip
    - terraform apply -var-file=production.tfvars -var rails_master_key=$PRODUCTION_RAILS_MASTER_KEY -var cf_user=$CF_USERNAME production_plan.out
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: $CI_COMMIT_BRANCH == "production"
      when: manual
