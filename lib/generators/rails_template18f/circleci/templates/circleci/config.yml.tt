version: 2.1

orbs:
  ruby: circleci/ruby@2.1.3
  node: circleci/node@5.2.0
  browser-tools: circleci/browser-tools@1.4.8<% if terraform? %>
  terraform: circleci/terraform@3.2.1<% end %>

commands:
  setup-project:
    steps:
      - checkout
      - ruby/install-deps
      - node/install:
          install-yarn: true
      - node/install-packages:
          cache-only-lockfile: false
          pkg-manager: yarn<% if oscal_dir_exists? %>
  trestle-cmd:
    description: Set up environment for running docker-trestle commands
    parameters:
      tag:
        description: docker-trestle tag to use.
        type: string
        default: latest
      cmd:
        description: Command to run within docker-trestle
        type: string
    steps:
      - run:
          name: Run trestle command
          command: docker run -u "$(id -u):$(id -g)" -v $(pwd)/doc/compliance/oscal:/app/docs:rw ghcr.io/gsa-tts/trestle:<< parameters.tag >> << parameters.cmd >><% end %>
  cg-deploy:
    description: "Login to cloud foundry space with service account credentials
      and push application using deployment configuration file."
    parameters:
      cloudgov_username:
        description: "Name of CircleCI project environment variable that
          holdes deployer username for cloudgov space"
        type: env_var_name
      cloudgov_password:
        description: "Name of CircleCI project environment variable that
          holds deployer password for cloudgov space"
        type: env_var_name
      cloudgov_org:
        description: "cloud.gov organization name"
        type: string
      cloudgov_space:
        description: "cloud.gov space name"
        type: string
      deploy_config_file:
        description: "Path to deployment configuration file"
        type: string
      rails_master_key:
        description: "Name of CircleCI project environment variable holding the RAILS_MASTER_KEY"
        type: env_var_name
    steps:
      - run:
          name: Vendor gems
          command: bundle cache --all
      - run:
          name: Install Cloud Foundry CLI
          command: |
            curl -v -L -o cf-cli_amd64.deb 'https://packages.cloudfoundry.org/stable?release=debian64&version=v8&source=github'
            sudo dpkg -i cf-cli_amd64.deb
      - run:
          name: Login with service account
          command: |
            cf login -a api.fr.cloud.gov \
              -u ${<< parameters.cloudgov_username >>} \
              -p ${<< parameters.cloudgov_password >>} \
              -o << parameters.cloudgov_org >> \
              -s << parameters.cloudgov_space >>
      - run:
          name: Set restricted egress
          command: |
            cf bind-security-group trusted_local_networks_egress << parameters.cloudgov_org >> \
              --space << parameters.cloudgov_space >>
      - run:
          name: Push application with deployment vars
          command: |
            cf push --strategy rolling \
              --vars-file << parameters.deploy_config_file >> \
              --var rails_master_key=${<< parameters.rails_master_key >>}

jobs:
  build:
    docker:
      - image: cimg/ruby:<%= ruby_version %>
    steps:
      - setup-project

  test:
    parallelism: 3
    docker:
      - image: cimg/ruby:<%= ruby_version %>
      - image: cimg/postgres:15.7
        environment:
          POSTGRES_USER: circleci
          POSTGRES_DB: <%= app_name %>_test
          POSTGRES_PASSWORD: ""
    environment:
      BUNDLE_JOBS: "3"
      BUNDLE_RETRY: "3"
      PGHOST: 127.0.0.1
      PGUSER: circleci
      PGPASSWORD: ""
      RAILS_ENV: test
    steps:
      - setup-project
      - browser-tools/install-chrome
      - browser-tools/install-chromedriver
      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run:
          name: Database setup
          command: bundle exec rails db:schema:load --trace

      # Precompile assets
      # Load assets from cache if possible, precompile assets then save cache
      # Multiple caches are used to increase the chance of a cache hit
      # https://circleci.com/docs/2.0/caching/#full-example-of-saving-and-restoring-cache
      - restore_cache:
          keys:
            - asset-cache-v1-{{ .Environment.RAILS_ENV }}-{{ arch }}-{{ .Branch }}-{{ .Environment.CIRCLE_SHA1 }}
            - asset-cache-v1-{{ .Environment.RAILS_ENV }}-{{ arch }}-{{ .Branch }}
            - asset-cache-v1-{{ .Environment.RAILS_ENV }}

      - run: bundle exec rake assets:precompile

      - save_cache:
          key: asset-cache-v1-{{ .Environment.RAILS_ENV }}-{{ arch }}-{{ .Branch }}-{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - public/assets
            - tmp/cache/assets/sprockets

      - ruby/rspec-test
<% if oscal_dir_exists? %>
  validate_ssp:
    machine:
      image: ubuntu-2204:current
    steps:
      - checkout
      - trestle-cmd:
          cmd: validate-ssp-json
      - trestle-cmd:
          cmd: assemble-ssp-json 2> /dev/null | grep "^No changes to assembled ssp"
  assemble_ssp:
    machine:
      image: ubuntu-2204:current
    steps:
      - checkout
      - trestle-cmd:
          cmd: trestle assemble -n <%= app_name %> system-security-plan
      - trestle-cmd:
          cmd: render-ssp
      - store_artifacts:
          path: doc/compliance/oscal/dist/system-security-plans/<%= app_name %>.json
      - store_artifacts:
          path: doc/compliance/oscal/ssp-render/<%= app_name %>_ssp.md
<% end %>
  static_security_scans:
    docker:
      - image: cimg/ruby:<%= ruby_version %>
    steps:
      - setup-project
      - run:
          name: Run Brakeman scan
          command: bin/brakeman --no-pager --ensure-ignore-notes
      - run:
          name: Bundle audit
          command: bundle exec rake bundler:audit
      - run:
          name: Yarn audit
          command: bundle exec rake yarn:audit

  sbom_generation:
    docker:
      - image: cimg/ruby:<%= ruby_version %>
    steps:
      - setup-project
      - run:
          name: Install cyclonedx
          command: gem install cyclonedx-ruby
      - run:
          name: Generate BOM
          command: cyclonedx-ruby -p . -o ruby_bom.xml
      - store_artifacts:
          path: ./ruby_bom.xml

  owasp_scan:
    machine:
      image: ubuntu-2204:current
    steps:
      - checkout

      # attempt to restore cache from build step to speed up local server startup time
      # This will need to be updated if the cache key for the `install-(deps|packages)` steps changes
      - restore_cache:
          keys:
            - gems-v1-{{ checksum "Gemfile.lock"  }}-{{ .Branch }}
      - restore_cache:
          keys:
            - node-deps-{{ arch }}-v1-{{ .Branch }}-{{ checksum "package.json" }}-{{ checksum "yarn.lock" }}

      - run:
          name: Start up local server
          command: docker-compose -f docker-compose.ci.yml up -d
      - run:
          name: Create reports directory
          command: mkdir reports
      - run:
          name: Run OWASP Zap
          command: |
            docker run -v $(pwd)/zap.conf:/zap/wrk/zap.conf:ro -v $(pwd)/reports:/zap/wrk:rw --rm \
              --user zap:$(id -g) --network="project_ci_network" -t ghcr.io/zaproxy/zaproxy:weekly \
              zap-baseline.py -t http://web:3000 -c zap.conf -I -i -r owasp_report.html
      - store_artifacts:
          path: reports/owasp_report.html

  owasp_full_scan:
    machine:
      image: ubuntu-2204:current
    steps:
      - checkout

      # attempt to restore cache from build step to speed up local server startup time
      # This will need to be updated if the cache key for the `install-(deps|packages)` steps changes
      - restore_cache:
          keys:
            - gems-v1-{{ checksum "Gemfile.lock"  }}-{{ .Branch }}
      - restore_cache:
          keys:
            - node-deps-{{ arch }}-v1-{{ .Branch }}-{{ checksum "package.json" }}-{{ checksum "yarn.lock" }}

      - run:
          name: Start up local server
          command: docker-compose -f docker-compose.ci.yml up -d
      - run:
          name: Create reports directory
          command: mkdir reports
      - run:
          name: Run OWASP Zap
          command: |
            docker run -v $(pwd)/zap.conf:/zap/wrk/zap.conf:ro -v $(pwd)/reports:/zap/wrk:rw --rm \
              --user zap:$(id -g) --network="project_ci_network" -t ghcr.io/zaproxy/zaproxy:weekly \
              zap-full-scan.py -t http://web:3000 -c zap.conf -I -i -r owasp_report.html
      - store_artifacts:
          path: reports/owasp_report.html

  a11y_scan:
    docker:
      - image: cimg/ruby:<%= ruby_version %>
      - image: cimg/postgres:15.7
        environment:
          POSTGRES_USER: circleci
          POSTGRES_DB: <%= app_name %>_development
          POSTGRES_PASSWORD: ""
    environment:
      BUNDLE_JOBS: "3"
      BUNDLE_RETRY: "3"
      PGHOST: 127.0.0.1
      PGUSER: circleci
      PGPASSWORD: ""
      RAILS_ENV: ci
    steps:
      - setup-project
      - browser-tools/install-chrome
      - browser-tools/install-chromedriver
      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run:
          name: Database setup
          command: bundle exec rails db:schema:load --trace

      # Precompile assets
      # Load assets from cache if possible, precompile assets then save cache
      # Multiple caches are used to increase the chance of a cache hit
      # https://circleci.com/docs/2.0/caching/#full-example-of-saving-and-restoring-cache
      - restore_cache:
          keys:
            - asset-cache-v1-{{ .Environment.RAILS_ENV }}-{{ arch }}-{{ .Branch }}-{{ .Environment.CIRCLE_SHA1 }}
            - asset-cache-v1-{{ .Environment.RAILS_ENV }}-{{ arch }}-{{ .Branch }}
            - asset-cache-v1-{{ .Environment.RAILS_ENV }}

      - run: bundle exec rake assets:precompile

      - save_cache:
          key: asset-cache-v1-{{ .Environment.RAILS_ENV }}-{{ arch }}-{{ .Branch }}-{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - public/assets
            - tmp/cache/assets/sprockets

      - run:
          name: Start server
          command: ./bin/rails server -p 3000
          background: true

      - run:
          name: Wait for server
          command: dockerize -wait http://localhost:3000 -timeout 1m

      - run:
          name: Run pa11y-ci
          command: yarn run pa11y-ci -c pa11yci.js
<% if terraform? %>
  terraform_plan_staging:
    executor: terraform/default
    steps:
      - checkout
      - terraform/init:
          path: terraform/staging
      - terraform/validate:
          path: terraform/staging
      - terraform/fmt:
          path: terraform/staging
      - run:
          name: Set terraform variables
          working_directory: terraform/staging
          command: echo -e "cf_user = \"$CF_STAGING_USERNAME\"\ncf_password = \"$CF_STAGING_PASSWORD\"" > secrets.auto.tfvars
      - terraform/plan:
          path: terraform/staging
      - persist_to_workspace:
          root: .
          paths:
            - ./terraform/staging
  terraform_apply_staging:
    executor: terraform/default
    steps:
      - checkout
      - attach_workspace:
          at: .
      - terraform/apply:
          path: terraform/staging
  terraform_plan_production:
    executor: terraform/default
    steps:
      - checkout
      - terraform/init:
          path: terraform/production
      - terraform/validate:
          path: terraform/production
      - terraform/fmt:
          path: terraform/production
      - run:
          name: Set terraform variables
          working_directory: terraform/production
          command: echo -e "cf_user = \"$CF_PRODUCTION_USERNAME\"\ncf_password = \"$CF_PRODUCTION_PASSWORD\"" > secrets.auto.tfvars
      - terraform/plan:
          path: terraform/production
      - persist_to_workspace:
          root: .
          paths:
            - ./terraform/production
  terraform_apply_production:
    executor: terraform/default
    steps:
      - checkout
      - attach_workspace:
          at: .
      - terraform/apply:
          path: terraform/production
<% end %>
  deploy_staging:
    docker:
      - image: cimg/ruby:<%= ruby_version %>
    steps:
      - setup-project
      - cg-deploy:
          cloudgov_username: CF_STAGING_USERNAME
          cloudgov_password: CF_STAGING_PASSWORD
          cloudgov_org: <%= cloud_gov_organization %>
          cloudgov_space: <%= cloud_gov_staging_space %>
          deploy_config_file: config/deployment/staging.yml
          rails_master_key: RAILS_MASTER_KEY
  deploy_production:
    docker:
      - image: cimg/ruby:<%= ruby_version %>
    steps:
      - setup-project
      - cg-deploy:
          cloudgov_username: CF_PRODUCTION_USERNAME
          cloudgov_password: CF_PRODUCTION_PASSWORD
          cloudgov_org: <%= cloud_gov_organization %>
          cloudgov_space: <%= cloud_gov_production_space %>
          deploy_config_file: config/deployment/production.yml
          rails_master_key: PRODUCTION_RAILS_MASTER_KEY

workflows:
  version: 2.1
  build_and_test:
    jobs:
      - build
      - test:
          requires:
            - build<% if oscal_dir_exists? %>
      - validate_ssp
      - assemble_ssp:
          filters:
            branches:
              only: main
          requires:
            - validate_ssp<% end %>
      - static_security_scans:
          requires:
            - build
      - sbom_generation:
          requires:
            - build
      - owasp_scan:
          requires:
            - build
      - a11y_scan:
          requires:
            - build<% if terraform? %>
      - terraform_plan_staging:
          filters:
            branches:
              ignore: production
      - terraform_apply_staging:
          filters:
            branches:
              only: main
          requires:
            - terraform_plan_staging
      - terraform_plan_production
      - approve_production_terraform:
          type: approval
          filters:
            branches:
              only: production
          requires:
            - terraform_plan_production
      - terraform_apply_production:
          filters:
            branches:
              only: production
          requires:
            - approve_production_terraform<% end %>
      - deploy_staging:
          filters:
            branches:
              only: main
          requires:
            - test
            - static_security_scans
            - owasp_scan
            - a11y_scan<% if terraform? %>
            - terraform_apply_staging<% end %>
      - deploy_production:
          filters:
            branches:
              only: production
          requires:
            - test
            - static_security_scans
            - owasp_scan
            - a11y_scan<% if terraform? %>
            - terraform_apply_production<% end %>
  daily_scan:
    triggers:
      - schedule:
          cron: "0 12 * * *"
          filters:
            branches:
              only:
                - dev
                - main
                - production
    jobs:
      - build
      - static_security_scans:
          requires:
            - build
      - owasp_full_scan:
          requires:
            - build
