# Terraform

This directory holds the terraform module for maintaining the system infrastructure and deploying the application.
<% unless terraform_manage_spaces? %>
## READ ME FIRST

Due to users not having `OrgManager` permission in the `sandbox-gsa` organization, this version of the terraform module
is very limited.

When you are ready to move the application to a non-sandbox cloud.gov organization, please re-run the terraform generator with…

```bash
bin/rails generate rails_template18f:terraform --cg-org=<ORG_NAME> --cg-staging=<STAGING_SPACE_NAME> --cg-prod=<PRODUCTION_SPACE_NAME> --backend=<%= backend %>
```

…to take full advantage of the generator, and then re-run your CI generator of choice to add production terraform plan and apply steps to your workflow.
<% end %>
## Terraform State Credentials

The `bootstrap` module is used to create resources that must be created by an individual developers credentials before automation can be run:

* service account and credentials to provide to the CI/CD pipeline to perform future updates<% unless use_gitlab_backend? %>
* an s3 bucket for later terraform runs to store their state in<% end %>

### Initial <%= use_gitlab_backend? ? "CI/CD pipeline" : "project" %> setup

These steps only need to be run once per project.

1. `cd bootstrap`<% if use_gitlab_backend? %>
1. Run `./setup_shadowenv.sh`<% end %><% if terraform_manage_spaces? %>
1. Add any users who should have access to the management space to `users.auto.tfvars`<% end %><% if use_gitlab_backend? %>
1. Run `./apply.sh`<% else %>
1. Run `./apply.sh -var create_bot_secrets_file=true`
1. Add `imports.tf` to git and commit the changes<% end %>
1. Setup your CI/CD Pipeline to run terraform and deploy your staging and production environments<% unless use_gitlab_backend? %>
    1. Copy backend credentials from `/terraform/.shadowenv.d/500_tf_backend_secrets.lisp` to your CI/CD secrets using the instructions in the base README<% end %>
    1. Copy the `cf_user` and `cf_password` credentials from `secrets.cicd.tfvars` to your CI/CD secrets using the instructions in the base README
1. Delete `secrets.cicd.tfvars`
1. Delete `.shadowenv.d/500_tf_backend_secrets.lisp` if you won't be running terraform locally

### To make changes to the bootstrap module

*This should not be necessary in most cases<% if terraform_manage_spaces? %>, other than adding or removing users who should have access to the mgmt space in `bootstrap/users.auto.tfvars`<% end %>*

1. Make your changes
1. Run `./apply.sh` and verify the plan before entering `yes`<% unless use_gitlab_backend? %>
1. Commit any changes to `imports.tf`<% end %>

## Set up a sandbox environment or review app<% unless use_gitlab_backend? %>

### Pre-requisites:

1. Someone on the team has run the [Initial project setup](#initial-project-setup) steps and `imports.tf` is up-to-date on your branch.
<% if terraform_manage_spaces? %>1. You are included in the list of users in `bootstrap/users.auto.tfvars` and `bootstrap/imports.tf`<% end %><% end %>

### Steps:
<% if use_gitlab_backend? %>
1. Run `./bootstrap/setup_shadowenv.sh`<% end %>
<% if terraform_manage_spaces? %>1. Create a new `sandbox-<NAME>.tfvars` file to hold variable values for your environment. A good starting point is copying `staging.tfvars` and editing it with your values
1. Add a `cf_user = "your.email@gsa.gov"` line to the `sandbox-<NAME>.tfvars` file<% end %>

1. Run terraform plan with:
    ```bash
    ./terraform.sh -e <%= terraform_manage_spaces? ? "sandbox-<NAME>" : "staging" %>
    ```

1. Apply changes with:
    ```bash
    ./terraform.sh -e <%= terraform_manage_spaces? ? "sandbox-<NAME>" : "staging" %> -c apply
    ```

1. <%= terraform_manage_spaces? ? "Optional: tear down the sandbox if" : "Destroy the app when" %> it does not need to be used anymore
    ```bash
    ./terraform.sh -e <%= terraform_manage_spaces? ? "sandbox-<NAME>" : "staging" %> -c destroy
    ```

## Structure

```
|- bootstrap/
|  |- main.tf
|  |- apply.sh
|  |- users.auto.tfvars<% if use_gitlab_backend? %>
|  |- setup_shadowenv.sh
|  |- bot_secrets.tftpl<% else %>
|  |- imports.tf (automatically generated)
|  |- terraform.tfstate(.backup) (automatically generated)
|  |- templates/
|     |- backend_config.tftpl
|     |- bot_secrets.tftpl
|     |- imports.tf.tftpl<% end %>
|- dist/
|  |- src.zip (automatically generated)
|- README.md
|- app.tf
|- main.tf
|- providers.tf
|- terraform.sh
|- variables.tf
|- <env>.tfvars
```

In the root module:
- `<env>.tfvars` is where to set variable values for the given environment name
- `terraform.sh` Helper script to setup terraform to point to the correct state file, create a service account to run the root module, and apply the root module.
- `app.tf` defines the application resource and configuration
- `main.tf` defines the persistent infrastructure
- `providers.tf` lists the required providers and shell backend config
- `variables.tf` lists the variables that will be needed

In the bootstrap module:
- `main.tf` sets up a management space, an s3 bucket to store terraform state files, and an initial SpaceDeployer for the system
- `apply.sh` Helper script to setup terraform and call `terraform apply`. Any arguments are passed through to the `apply` call
- `users.auto.tfvars` this file defines the list of cloud.gov accounts that should have access to the management space<% if use_gitlab_backend? %>
- `setup_shadowenv.sh` helper script to set terraform backend values using the gitlab http backend in shadowenv<% else %>
- `imports.tf` import blocks to create a new local state file when new developers need to access the state file. This file is automatically generated by calling `./apply.sh` and should be checked into git on any changes<% end %>
