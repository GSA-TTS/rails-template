# Terraform

This directory holds the terraform module for maintaining the system infrastructure and deploying the application.

<% unless terraform_manage_spaces? %>
## READ ME FIRST

Due to users not having `OrgManager` permission in the `sandbox-gsa` organization, this version of the terraform module
is very limited.

When you are ready to move the application to a non-sandbox cloud.gov organization, please re-run the terraform generator with…

```bash
bin/rails generate rails_template18f:terraform --cg-org=<ORG_NAME> --cg-staging=<STAGING_SPACE_NAME> --cg-prod=<PRODUCTION_SPACE_NAME>
```

…to take full advantage of the generator, and then re-run your CI generator of choice to add production terraform plan and apply steps to your workflow.
<% end %>

## Terraform State Credentials

The `bootstrap` module is used to create an s3 bucket for later terraform runs to store their state in as well as
create credentials files so developers can use that s3 bucket to create their own sandbox environments.

### Initial project setup

These steps only need to be run once per project.

1. `cd bootstrap`<% if terraform_manage_spaces? %>
1. Add any users who should have access to the terraform state bucket to `users.auto.tfvars`<% end %>
1. Run `./apply.sh -var create_bot_secrets_file=true`
1. Add `imports.tf` to git and commit the changes
1. Setup your CI/CD Pipeline to run terraform and deploy your staging and production environments
    1. Copy backend credentials from `/terraform/secrets.backend.tfvars` to your CI/CD secrets using the instructions in the base README
    1. Copy the cf_user and cf_password credentials from `/terraform/secrets.cicd.tfvars` to your CI/CD secrets using the instructions in the base README
1. Delete the two secrets files

### To make changes to the bootstrap module

*This should not be necessary in most cases<% if terraform_manage_spaces? %>, other than adding or removing users who should have access to the state bucket in `bootstrap/users.auto.tfvars`<% end %>*

1. Make your changes
1. Run `./apply.sh` and verify the plan before entering `yes`
1. Commit any changes to `imports.tf`

## Set up a sandbox environment or review app

### Pre-requisites:

1. Someone on the team has run the [Initial project setup](#initial-project-setup) steps and `imports.tf` is up-to-date on your branch.
<% if terraform_manage_spaces? %>1. You are included in the list of users in `bootstrap/users.auto.tfvars` and `bootstrap/imports.tf`<% end %>

### Steps:

<% if terraform_manage_spaces? %>1. Create a new `sandbox-<NAME>.tfvars` file to hold variable values for your environment. A good starting point is copying `staging.tfvars` and editing it with your values.<% end %>

1. Run terraform plan with:
    ```bash
    ./terraform.sh -e <%= terraform_manage_spaces? ? "sandbox-<NAME>" : "staging" %>
    ```

1. Apply changes with:
    ```bash
    ./terraform.sh -e <%= terraform_manage_spaces? ? "sandbox-<NAME>" : "staging" %> -c apply
    ```

1. <%= terraform_manage_spaces? ? "Optional: tear down the sandbox if" : "Destroy the app when" %> it does not need to be used anymore
    ```bash
    ./terraform.sh -e <%= terraform_manage_spaces? ? "sandbox-<NAME>" : "staging" %> -c destroy
    ```

## Structure

```
|- bootstrap/
|  |- main.tf
|  |- apply.sh
|  |- imports.tf (automatically generated)
|  |- users.auto.tfvars
|  |- terraform.tfstate(.backup) (automatically generated)
|  |- templates/
|     |- backend_config.tftpl
|     |- bot_secrets.tftpl
|     |- imports.tf.tftpl<% if terraform_manage_spaces? %>
|- sandbox_bot/
|  |- main.tf
|  |- run.sh
|  |- <sandbox_name>/ (automatically generated)
|     |- terraform.tfstate(.backup) (automatically generated)<% end %>
|- dist/
|  |- src.zip (automatically generated)
|- README.md
|- app.tf
|- main.tf
|- providers.tf
|- terraform.sh
|- variables.tf
|- <env>.tfvars
```

In the root module:
- `<env>.tfvars` is where to set variable values for the given environment name
- `terraform.sh` Helper script to setup terraform to point to the correct state file, create a service account to run the root module, and apply the root module.
- `app.tf` defines the application resource and configuration
- `main.tf` defines the persistent infrastructure
- `providers.tf` lists the required providers and shell backend config
- `variables.tf` lists the variables that will be needed

In the bootstrap module:
- `main.tf` sets up a management space, an s3 bucket to store terraform state files, and an initial SpaceDeployer for the system
- `apply.sh` Helper script to either recreate the state locally or call `terraform apply` Any arguments are passed through to the `apply` call
- `imports.tf` import blocks to create a new local state file when new developers need to access the state file. This file is automatically generated by calling `./apply.sh` and should be checked into git on any changes
- `users.auto.tfvars` this file defines the list of cloud.gov accounts that should have access to the terraform state bucket

In the sandbox_bot module:
- `main.tf` sets up a cloud.gov SpaceDeployer to manage the sandbox environment and outputs its credentials into the main module `secrets.auto.tfvars`
- `run.sh` Helper script to set up a separate local state file for each sandbox name. In normal use this will only ever be called by `./terraform.sh`
