locals {
  cf_org_name     = "<%= cloud_gov_organization %>"
  app_name        = "<%= app_name %>"
  space_deployers = setunion([var.cf_user], var.space_deployers)
}

<% if terraform_manage_spaces? %>
module "app_space" {
  source = "github.com/gsa-tts/terraform-cloudgov//cg_space?ref=v2.0.2"

  cf_org_name   = local.cf_org_name
  cf_space_name = var.cf_space_name
  allow_ssh     = var.allow_space_ssh
  deployers     = local.space_deployers
  developers    = var.space_developers
}
<% else %>
data "cloudfoundry_org" "org" {
  name = local.cf_org_name
}
data "cloudfoundry_space" "app_space" {
  name = var.cf_space_name
  org  = data.cloudfoundry_org.org.id
}
<% end %>
# temporary method for setting egress rules until terraform provider supports it and cg_space module is updated
data "external" "set-app-space-egress" {
  program     = ["/bin/sh", "set_space_egress.sh", "-t", "-s", var.cf_space_name, "-o", local.cf_org_name]
  working_dir = path.module<% if terraform_manage_spaces? %>
  # depends_on line is required only for initial creation and destruction. It can be commented out for updates if you see unwanted cascading effects
  depends_on = [module.app_space]<% end %>
}

module "database" {
  source = "github.com/gsa-tts/terraform-cloudgov//database?ref=v2.0.2"

  cf_space_id   = <% if terraform_manage_spaces? %>module.app_space.space_id<% else %>data.cloudfoundry_space.app_space.id<% end %>
  name          = "${local.app_name}-rds-${var.env}"
  rds_plan_name = var.rds_plan_name<% if terraform_manage_spaces? %>
  # depends_on line is required only for initial creation and destruction. It can be commented out for updates if you see unwanted cascading effects
  depends_on = [module.app_space]<% end %>
}
<% if has_active_job? %>
module "redis" {
  source = "github.com/gsa-tts/terraform-cloudgov//redis?ref=v2.0.2"

  cf_space_id     = <% if terraform_manage_spaces? %>module.app_space.space_id<% else %>data.cloudfoundry_space.app_space.id<% end %>
  name            = "${local.app_name}-redis-${var.env}"
  redis_plan_name = var.redis_plan_name<% if terraform_manage_spaces? %>
  # depends_on line is required only for initial creation and destruction. It can be commented out for updates if you see unwanted cascading effects
  depends_on = [module.app_space]<% end %>
}
<% end %>
<% if has_active_storage? %>
module "s3" {
  source = "github.com/gsa-tts/terraform-cloudgov//s3?ref=v2.0.2"

  cf_space_id  = <% if terraform_manage_spaces? %>module.app_space.space_id<% else %>data.cloudfoundry_space.app_space.id<% end %>
  name         = "${local.app_name}-s3-${var.env}"
  s3_plan_name = var.s3_plan_name<% if terraform_manage_spaces? %>
  # depends_on line is required only for initial creation and destruction. It can be commented out for updates if you see unwanted cascading effects
  depends_on = [module.app_space]<% end %>
}

module "clamav" {
  source = "github.com/gsa-tts/terraform-cloudgov//clamav?ref=v2.0.2"

  cf_org_name   = local.cf_org_name
  cf_space_name = var.cf_space_name
  name          = "${local.app_name}-clamapi-${var.env}"
  clamav_image  = "ghcr.io/gsa-tts/clamav-rest/clamav:latest"
  max_file_size = "30M"<% if terraform_manage_spaces? %>
  # depends_on line is required only for initial creation and destruction. It can be commented out for updates if you see unwanted cascading effects
  depends_on = [module.app_space]<% end %>
}

resource "cloudfoundry_network_policy" "clamav_routing" {
  provider = cloudfoundry-community
  policy {
    source_app      = cloudfoundry_app.app.id
    destination_app = module.clamav.app_id
    port            = "61443"
  }
}
<% end %>

###########################################################################
# Before setting var.custom_domain_name, perform the following steps:
# 1) Domain must be manually created by an OrgManager:
#     cf create-domain var.cf_org_name var.domain_name
# 2) ACME challenge record must be created.
#     See https://cloud.gov/docs/services/external-domain-service/#how-to-create-an-instance-of-this-service
###########################################################################
module "domain" {
  count  = (var.custom_domain_name == null ? 0 : 1)
  source = "github.com/gsa-tts/terraform-cloudgov//domain?ref=v2.0.2"

  cf_org_name   = local.cf_org_name
  cf_space      = <% if terraform_manage_spaces? %>module.app_space.space<% else %>data.cloudfoundry_space.app_space<% end %>
  cdn_plan_name = "domain"
  domain_name   = var.custom_domain_name
  host_name     = var.host_name<% if terraform_manage_spaces? %>
  # depends_on line is required only for initial creation and destruction. It can be commented out for updates if you see unwanted cascading effects
  depends_on = [module.app_space]<% end %>
}
